// src/pages/AdminProducts.jsx
import React, { useEffect, useState } from "react";
import { apiGet, apiPost, apiPut, apiDelete } from "../utils/api";
import "../assets/css/AdminProducts.css";

function AdminProducts() {
  const [products, setProducts] = useState([]);
  const [message, setMessage] = useState("");

  // D·ªØ li·ªáu form (d√πng chung cho Th√™m v√† Ch·ªânh s·ª≠a)
  const initialForm = {
    id: null,           // null = Th√™m m·ªõi; N·∫øu c√≥ id = Ch·ªânh s·ª≠a
    name: "",
    price: "",
    stock: "",
    image: "",
    description: "",
  };
  const [form, setForm] = useState(initialForm);
  const [isEditing, setIsEditing] = useState(false);

  // L·∫•y token t·ª´ localStorage
  const token = localStorage.getItem("token");

  // 1) Fetch danh s√°ch s·∫£n ph·∫©m
  const fetchProducts = async () => {
    try {
      const data = await apiGet("/admin/products", token);
      setProducts(data || []);
      setMessage("");
    } catch (err) {
      console.error(err);
      setMessage("‚ö†Ô∏è L·ªói khi t·∫£i danh s√°ch s·∫£n ph·∫©m.");
    }
  };

  // 2) X√≥a s·∫£n ph·∫©m
  const handleDelete = async (id) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° s·∫£n ph·∫©m n√†y?")) return;
    try {
      await apiDelete(`/admin/products/${id}`, token);
      // Lo·∫°i b·ªè kh·ªèi danh s√°ch ƒëang c√≥
      setProducts((prev) => prev.filter((p) => p.id !== id));
      setMessage("‚úÖ ƒê√£ xo√° s·∫£n ph·∫©m.");
      // N·∫øu ƒëang ch·ªânh s·ª≠a ch√≠nh s·∫£n ph·∫©m n√†y, reset form
      if (form.id === id) {
        setForm(initialForm);
        setIsEditing(false);
      }
    } catch (err) {
      console.error(err);
      setMessage("‚ùå Kh√¥ng xo√° ƒë∆∞·ª£c s·∫£n ph·∫©m.");
    }
  };

  // 3) Khi nh·∫•n ‚ÄúS·ª≠a‚Äù ‚Üí ƒëi·ªÅn form, b·∫≠t ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
  const handleEditClick = (product) => {
    setForm({
      id: product.id,
      name: product.name,
      price: product.price.toString(),
      stock: product.stock.toString(),
      image: product.image || "",
      description: product.Description || "", // ho·∫∑c product.description tu·ª≥ field model
    });
    setIsEditing(true);
    setMessage("");
    // Scroll l√™n form n·∫øu mu·ªën
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  // 4) X·ª≠ l√Ω thay ƒë·ªïi form
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // 5) Submit form: th√™m ho·∫∑c c·∫≠p nh·∫≠t
  const handleSubmit = async (e) => {
    e.preventDefault();

    // Validate c∆° b·∫£n: b·∫Øt bu·ªôc ph·∫£i c√≥ name, price, stock
    if (!form.name.trim() || !form.price || !form.stock) {
      setMessage("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn t·ªëi thi·ªÉu T√™n, Gi√° v√† Kho.");
      return;
    }

    // Chu·∫©n ho√° payload
    const payload = {
      name: form.name.trim(),
      price: parseFloat(form.price),
      stock: parseInt(form.stock, 10),
      image: form.image.trim(),
      description: form.description.trim(),
    };

    try {
      if (isEditing && form.id) {
        // G·ªçi PUT /admin/products/:id
        await apiPut(`/admin/products/${form.id}`, payload, token);
        setMessage("‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng.");
      } else {
        // G·ªçi POST /admin/products
        await apiPost("/admin/products", payload, token);
        setMessage("‚úÖ Th√™m s·∫£n ph·∫©m th√†nh c√¥ng.");
      }
      // L√†m m·ªõi danh s√°ch
      fetchProducts();
      // Reset form
      setForm(initialForm);
      setIsEditing(false);
    } catch (err) {
      console.error(err);
      setMessage(
        isEditing
          ? "‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m."
          : "‚ùå Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m."
      );
    }
  };

  // 6) H·ªßy ch·ªânh s·ª≠a: reset form v·ªÅ ban ƒë·∫ßu
  const handleCancelEdit = () => {
    setForm(initialForm);
    setIsEditing(false);
    setMessage("");
  };

  useEffect(() => {
    fetchProducts();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <div className="admin-products">
      <h2>üì¶ Qu·∫£n l√Ω s·∫£n ph·∫©m</h2>
      {message && <p className="message">{message}</p>}

      {/* Form Th√™m / Ch·ªânh s·ª≠a */}
      <div className="form-container">
        <h3>{isEditing ? "‚úèÔ∏è Ch·ªânh s·ª≠a s·∫£n ph·∫©m" : "‚ûï Th√™m s·∫£n ph·∫©m m·ªõi"}</h3>
        <form onSubmit={handleSubmit} className="product-form">
          <div className="form-group">
            <label htmlFor="name">
              T√™n s·∫£n ph·∫©m<span className="required">*</span>:
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={form.name}
              onChange={handleInputChange}
            />
          </div>

          <div className="form-group">
            <label htmlFor="price">
              Gi√° (VND)<span className="required">*</span>:
            </label>
            <input
              type="number"
              id="price"
              name="price"
              value={form.price}
              onChange={handleInputChange}
              step="1000"
            />
          </div>

          <div className="form-group">
            <label htmlFor="stock">
              Kho (s·ªë l∆∞·ª£ng)<span className="required">*</span>:
            </label>
            <input
              type="number"
              id="stock"
              name="stock"
              value={form.stock}
              onChange={handleInputChange}
            />
          </div>

          <div className="form-group">
            <label htmlFor="image">URL ·∫¢nh:</label>
            <input
              type="text"
              id="image"
              name="image"
              value={form.image}
              onChange={handleInputChange}
            />
          </div>

          <div className="form-group">
            <label htmlFor="description">M√¥ t·∫£:</label>
            <textarea
              id="description"
              name="description"
              value={form.description}
              onChange={handleInputChange}
              rows="3"
            ></textarea>
          </div>

          <div className="form-actions">
            <button type="submit" className="btn-save">
              {isEditing ? "üíæ L∆∞u thay ƒë·ªïi" : "‚ûï Th√™m s·∫£n ph·∫©m"}
            </button>
            {isEditing && (
              <button
                type="button"
                className="btn-cancel"
                onClick={handleCancelEdit}
              >
                ‚ùå Hu·ª∑ ch·ªânh s·ª≠a
              </button>
            )}
          </div>
        </form>
      </div>

      {/* B·∫£ng li·ªát k√™ s·∫£n ph·∫©m */}
      <table className="products-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>·∫¢nh</th>
            <th>T√™n</th>
            <th>Gi√°</th>
            <th>Kho</th>
            <th>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {products.map((p) => (
            <tr key={p.id}>
              <td>{p.id}</td>
              <td>
                <img
                  src={p.image}
                  alt={p.name}
                  className="product-thumb"
                  onError={(e) => {
                    e.target.src =
                      "https://via.placeholder.com/60x60?text=No+Image";
                  }}
                />
              </td>
              <td>{p.name}</td>
              <td>{Number(p.price).toLocaleString("vi-VN")}‚Ç´</td>
              <td>{p.stock}</td>
              <td className="actions-cell">
                <button
                  className="btn-edit"
                  onClick={() => handleEditClick(p)}
                >
                  ‚úèÔ∏è S·ª≠a
                </button>
                <button
                  className="btn-delete"
                  onClick={() => handleDelete(p.id)}
                >
                  ‚ùå Xo√°
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default AdminProducts;
